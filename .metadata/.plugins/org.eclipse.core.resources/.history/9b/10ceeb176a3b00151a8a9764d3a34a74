package de.heinfricke.countriesmapper.fileoperations;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

import de.heinfricke.countriesmapper.country.Country;
import de.heinfricke.countriesmapper.utils.*;


public class DirectoriesMaker implements Creator{
	
	/**
	 * This is a constant that describes how many characters are grouped in level one directory.
	 */
	private static final int NUMBER_OF_GROUPED_CHARACTERS = 3;
	
	
	
	public void createFiles(String userPath, Set<Country> countriesFromUser)
	{
		Set<Country> namesOfCountries = countriesFromUser;
		int counter = 0;
		int counterForHashtable = 0;
		String threeLetters = "";
		String path = userPath;
		List<String> collectionOfThreeLetters = new ArrayList<String>();
		Map<String, Integer> justLettersOfAlphabet = new HashMap<String, Integer>();
		Set<String> directoriesToCreate = new TreeSet<String>();

		System.out.print("Your directories will be created in: ");
		System.out.println(path);
	
		//This 'for' takes all letters of alphabet to 'HashMap' and divide them into smaller parts to 'ArrayList'.
		for(char alphabet = 'A'; alphabet <= 'Z'; alphabet++)
		{		
			threeLetters += alphabet;
			counter++;
			String oneLetter = "";
			oneLetter += alphabet;
			Integer position = new Integer(counterForHashtable);
			justLettersOfAlphabet.put(oneLetter, position);

			if(counter % NUMBER_OF_GROUPED_CHARACTERS == 0 || alphabet == 'Z')
			{
				collectionOfThreeLetters.add(threeLetters);
				threeLetters = "";
				counterForHashtable++;
			}
		}
		
		
		//This 'for' checks on which letters countries we have in our 'txt' file and it also makes list of directories to create.
		for(Country country : namesOfCountries)
		{
			String countryName = country.getName();
			String firstLetterOfCountry = StringUtils.getFirstLetter(countryName);
			int numberOfPositionInArrayList = justLettersOfAlphabet.get(firstLetterOfCountry);			
			directoriesToCreate.add(collectionOfThreeLetters.get(numberOfPositionInArrayList));
		}
		
		
		//Here user can chose if he want to delete all directories or just these, which he will make new one.
		String userDecision = extractUserDecision();
		
		
		if(userDecision.equals("Y") || userDecision.equals("y"))
		{
			for(String directoryToDelete : collectionOfThreeLetters)
			{
				String pathOfGorupDirectory = (path + File.separator + directoryToDelete);
				File tempfile = new File(pathOfGorupDirectory);
				
				deleteDirectory(tempfile);
			}
		}
		else
		{
			for(String directoryToDelete : directoriesToCreate)
			{
				String pathOfGorupDirectory = (path + File.separator + directoryToDelete);
				File tempfile = new File(pathOfGorupDirectory);
				
				deleteDirectory(tempfile);
			}
		}
		
		//This 'for' create new directories for each group of countries.
		for(String dir : directoriesToCreate)
		{
			String nameOfDirectory = (path + File.separator + dir);
			File groupFile = new File(nameOfDirectory);
			groupFile.mkdirs();
		}
	
		//This 'for' make directory for each country which '.txt' file contains.
		for(Country country : namesOfCountries)
		{
			String countryName = country.getName();
			String firstLetter = StringUtils.getFirstLetter(countryName);
			int positionOfLetterInArrayList = justLettersOfAlphabet.get(firstLetter);
			String x = collectionOfThreeLetters.get(positionOfLetterInArrayList);
	
			String pathForDirectoryToCreate = (path + File.separator + x + File.separator + countryName);
			File directoryForCountry = new File(pathForDirectoryToCreate);
			directoryForCountry.mkdirs();		
		}
	}


	private String extractUserDecision() {
		Scanner scanner = null;
		String userDecision = "n";
		scanner = new Scanner (System.in);
		try
		{
			System.out.print("Do you want do delete all your directories? [Y/N]: " );
			userDecision = scanner.next();
			System.out.println();
		}
		finally
		{
			if(scanner != null)
			{
				scanner.close();
			}
		}
		return userDecision;
	}
	
}